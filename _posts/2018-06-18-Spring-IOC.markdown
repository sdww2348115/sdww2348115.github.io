---
layout: post
title:  "IOC"
date:   2018-06-18 11:31:01 +0800
categories: spring
permalink: /spring/ioc
---

## 引言
由于其优越的特性，Spring Framework已经成为企业级Java应用事实上的标准。Spring提供了一系列开箱即用的模块，让构建企业级应用变得非常的简单、方便。

往小了说，在构建Web应用的时候，表现层有SpringMVC解决方案；持久化有JPA作为依托，同时还可以使用MyBatis/Hibernate等持久化框架；权限认证可采用Spring Security；缓存也有一系列解决方案......

对于构建一个企业级的大应用，Spring也针对性地推出了一系列产品：针对快速开发和容器化部署的SpringBoot；针对快速构建批处理的SpringBatch;大系统微服务框架的SpringCloud

上述的一切，都离不开Spring框架的核心：IOC与AOP。

## IOC概念
在没有IOC概念之前，当程序员需要一个对象的时候，往往通过直接创建实现。创建对象通常有以下两步：

 1. 使用构造函数得到实例化的类
 2. 执行对象的初始化工作

在实际的程序中，对象的创建过程往往是非常复杂的，每一个对象初始化都涉及到许多步骤，包括创建与之相关的类、将自己注册到某个组件中，执行某些初始化方法，设置类的初始化状态等等。这些代码片段往往分散于程序的每个角落中，难于管理与复用，因此，人们总结了一系列工厂设计模式作为对象创建的范式，它们共同的特点是：`将散乱的对象初始化逻辑集中起来放到工厂类中，由工厂类来执行对象的初始化工作`。

工厂类的出现一定程度上缓解了对象创建的复杂性，但是仍有一些问题无法得到解决：

 * 使用对象时，除了创建之外，程序往往还会有其他方式。比如获取单例对象。
 * 企业级应用逻辑繁复，对象既多又杂，无限制使用工厂模式将导致工厂类泛滥。
 * 企业级应用中，对象之间的逻辑关系紧密，往往一个对象将依赖于不同层次的多个其他特定对象。
 * 对象泛滥，往往创建一个业务逻辑对象需要创建数十甚至数百个底层对象

---
layout: post
title:  "JVM垃圾回收"
date:   2018-04-15 22:54:01 +0800
categories: jvm
permalink: /jvm/gc
---

## 概述
垃圾回收是一个让Java开发者又爱又恨的特性。一方面，它简化了广大开发者的工作，在虚拟机自动内存管理机制的帮助下，不再需要为每一个new的操作写配对的delete/free操作，不容易出现内存泄漏和内存溢出问题；另一方面，正是因为Java程序员将内存控制的权力交给了Java虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会十分痛苦。

## 内存泄漏与内存溢出
了解与分析JVM的GC过程，最主要的目的就是分析在程序运行过程中可能出现的内存泄漏与内存溢出问题，优化JVM参数，使程序运行更加高效、稳定。

* 内存溢出：即OutOfMemoryError,当程序申请内存空间时，JVM无法分配给程序足够的内存空间导致的错误。本文只分析JVM相关内存区域的OOM错误。（方法区与堆，不包含直接内存）
* 内存泄漏：JVM中无用对象（不再被使用的对象）不能正确被JVM所回收，持续占用内存情况。内存泄漏的问题常常被忽略，因为在程序不出现错误的情况下，开发者们一般不会去关注JVM的内存使用情况；只有在发生严重的JVM内存泄漏，导致JVM出现OOM错误时，开发者们才会去分析JVM的内存泄漏问题。

JVM中的内存泄漏问题与内存溢出问题相伴相生：内存泄漏是根本原因，它会导致JVM的可用内存越来越少，直到最后没有足够内存空间分配，导致抛出OOM错误。OOM错误是表现，开发者们一般只会在JVM发生了OOM错误之后才会去分析JVM的内存使用情况，找到根源处的内存泄漏问题。

## 垃圾回收的对象
所有垃圾回收算法的目的只有一个：清理掉所有不再被使用的对象。如何判断哪些对象是不再被需要的呢？

### 引用计数法
---
layout: post
title:  "ClassLoader"
date:   2018-05-08 22:52:01 +0800
categories: jvm
permalink: /jvm/classLoader
---

## 概述
虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，整个过程就是虚拟机的类加载机制。

与其他语言的不同在于，Java语言中，类型的加载、连接和初始化过程都是在程序运行期间完成的，这样的策略会令类加载时稍微开销大一点，但却带来了高度的灵活性。Java中许多语言特性都用到了动态加载和动态连接。

## 类加载的时机
Java中类的整个生命周期共有6个阶段：加载、验证、准备、解析、初始化、使用、卸载。

![class-life](../resources/img/class-life.png)

有且仅有遇到以下5种情况，jvm才会开始一个class的初始化：

1. 遇到`new`、`getstatic`、`putstatic`、`invokestatic`这四条字节码指令时，如果类没有进行过初始化，则需要对其首先进行初始化。这4条指令最常见的的场景分别为：使用new关键字实例化对象的时候、读取或者设置一个类的静态字段时、以及调用一个类静态方法的时候。
2. 使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则触发其初始化过程。
3. 当初始化一个类的时候，发现其父类还没有进行过初始化，则需要先触发其父类的初始化。
4. 当虚拟机启动时，jvm将首先初始化包含Main()方法的类
5. 当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandler实例最后的解析结果REF\_getStatic、REF\_putStatic、REF\_invokeStatic方法的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。

只有这5种方式会触发类地初始化，它们被称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，这些被称为被动引用。

 * 仅使用一个类的引用不会触发类的初始化
 * 通过子类引用父类的静态字段，不会触发类的初始化
 * 使用一个类的数组定义不会触发类的初始化
 * 常量在编译阶段会存入调用类的常量池中，本质上并没有使用到定义常量的类，因此不会触发类的初始化

## 类加载的过程
---
layout: post
title:  "ClassLoader"
date:   2018-05-08 22:52:01 +0800
categories: jvm
permalink: /jvm/classLoader
---

## 概述
虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，整个过程就是虚拟机的类加载机制。

与其他语言的不同在于，Java语言中，类型的加载、连接和初始化过程都是在程序运行期间完成的，这样的策略会令类加载时稍微开销大一点，但却带来了高度的灵活性。Java中许多语言特性都用到了动态加载和动态连接。

## 类加载的时机
Java中类的整个生命周期共有6个阶段：加载、验证、准备、解析、初始化、使用、卸载。

![class-life](../resources/img/class-life.png)

有且仅有遇到以下5种情况，jvm才会开始一个class的初始化：

1. 遇到`new`、`getstatic`、`putstatic`、`invokestatic`这四条字节码指令时，如果类没有进行过初始化，则需要对其首先进行初始化。这4条指令最常见的的场景分别为：使用new关键字实例化对象的时候、读取或者设置一个类的静态字段时、以及调用一个类静态方法的时候。
2. 使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则触发其初始化过程。
3. 当初始化一个类的时候，发现其父类还没有进行过初始化，则需要先触发其父类的初始化。
4. 当虚拟机启动时，jvm将首先初始化包含Main()方法的类
5. 当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandler实例最后的解析结果REF\_getStatic、REF\_putStatic、REF\_invokeStatic方法的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。

只有这5种方式会触发类地初始化，它们被称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，这些被称为被动引用。

 * 仅使用一个类的引用不会触发类的初始化
 * 通过子类引用父类的静态字段，不会触发类的初始化
 * 使用一个类的数组定义不会触发类的初始化
 * 常量在编译阶段会存入调用类的常量池中，本质上并没有使用到定义常量的类，因此不会触发类的初始化

## 类加载的过程
在加载阶段，虚拟机所作的事为：

1. 通过一个类的全限名获取定义该类的二进制字节流
2. 将这个字节流所代表的静态存储结构转化为方法区的运行时结构数据
3. 在内存中生成一个代表此类的java.lang.Class对象，作为方法区这个类的各种数据访问接口

一般来说，加载阶段可控的是如何获取类的二进制字节流，包括但不限于以下情况：

* 从class文件中读取
* 从ZIP包中读取
* 从网络中获取
* 运行时动态计算生成
* 从其他文件生成，譬如jsp
* 从数据库读取

JVM中数组是一种比较特殊的类，它本身不通过类加载器创建，它是由JVM直接创建的。数组类与其元素类型密切相关，数组类的创建过程遵循以下原则：

* 如果数组的组件类型是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组类将在加载该组件类型的类加载器的类名称空间上被标识。
* 如果数组的组件类型不是引用类型（比如int[]），JVM将把数组类与引导类加载器关联（bootstrap classloader）
* 数组类的可见性与组件类型一致，如果组件类型不是引用类型，数组类的可见性默认为public

## 验证
验证是连接阶段第一步，目的是为了确保Class文件字节流包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全。

从整体上来看，验证阶段大致会完成下面4个阶段的检验动作：

1. 文件格式验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本虚拟机处理。
 * 是否以MagicNumber 0xCAFEBABE开头
 * 主、次版本号是否在当前虚拟机处理范围之内
 * 常量池中的常量是否有不被支持的常量类型（检查常量tag标志）
 * 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量
 * Class文件中各个部分及文件本身是否有被删除的或附加的其他信息

2. 元数据验证：对字节码描述信息进行语义分析，以保证其描述的信息符合Java语言规范要求。
 * 这个类是否有父类（除java.lang.Object之外，所有类均有父类）
 * 这个类的父类是否继承了不被允许继承的类（被final修饰的类）
 * 如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法
 * 类中的字段、方法是否与父类产生矛盾（例如覆盖了父类final字段，出现不符合规则的方法重载等）
 
3. 字节码验证：对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。
 * 保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，不会出现保存了一个int数据，却按照long类型进行加载。
 * 保证跳转指令不会跳转到方法体之外的字节码指令上。
 * 保证方法体中的类型转换是有效的。    

4. 符号引用验证：对类自身以外（常量池中的各种符号引用）信息进行匹配性校验：
 * 符号引用中通过字符串描述的全限定名是否能找到对应的类
 * 在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段
 * 符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可以被当前类访问

## 准备
准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中被分配。需要注意以下两点：
1. 进行内存分配的仅包括类变量（被static修饰的变量），不包括实例变量
2. 初始值“通常情况”下为数据类型的零值。    
假设一个类变量定义为
```java
public static int value = 123;
```
变量value在准备阶段后的初始值为0而不是123。将value赋值为123的指令存放于类构造器&lt;clinit&gt;()方法中，该动作将在初始化阶段进行

`特殊情况`是指该类字段的字段属性表中存在ConstantValue属性，那么在准备阶段变量value将被初始化为ConstantValue属性所指定的值，假设上面类变量定义为：
```java
public static final int value = 123;
```
编译时javac将会为value生成ConstantValue属性，准备阶段就会为value赋值为123。